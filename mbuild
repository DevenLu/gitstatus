#!/usr/bin/env zsh
#
# Linux Setup:
#
# - Install docker.
#   $ apt install docker.io     # adjust appropriately if there is no `apt`
#   $ usermod -aG docker $USER  # not needed if going to build as root
# - Install git.
#   $ apt install git           # adjust appropriately if there is no `apt`
#
# macOS Setup:
#
# - Install compiler tools:
#   $ xcode-select --install
# - Install homebrew: https://brew.sh/.
#   $ bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#
# FreeBSD Setup:
#
# - Install git.
#   $ pkg install git
#
# Windows Setup:
#
# - Disable Windows Defender (optional).
#   ps> Set-MpPreference -DisableRealtimeMonitoring $true
# - Install 64-bit and 32-bit msys2: https://www.msys2.org/.
# - Install 64-bit and 32-bit cygwin: https://cygwin.com/install.html.
#   - Choose to install 32-bit to c:/cygwin32 instead of the default c:/cygwin.
#   - Select these packages: binutils, cmake, gcc-core, gcc-g++, git, make.
# - Install OpenSSH: https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse.
#   ps> Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
#   ps> Start-Service sshd
#   ps> Set-Service -Name sshd -StartupType 'Automatic'
# - Enable publickey authentication: https://stackoverflow.com/a/50502015/1095235.
#   ps> cd $env:USERPROFILE
#   ps> mkdir .ssh
#   ps> notepad.exe .ssh/authorized_keys
#     - Paste your public key, save, close.
#   ps> icacls .ssh/authorized_keys /inheritance:r
#   ps> notepad.exe C:\ProgramData\ssh\sshd_config
#     - Comment out these two lines, save, close:
#       # Match Group administrators
#       #   AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
#   ps> Restart-Service sshd

'emulate' '-L' 'zsh' '-o' 'no_aliases' '-o' 'err_return'
setopt no_unset extended_glob pipe_fail prompt_percent typeset_silent \
  no_prompt_subst no_prompt_bang pushd_silent monitor warn_create_global

zmodload zsh/system

local -r git_url='https://github.com/romkatv/gitstatus.git'

local -rA assets=(
  # target kernel-arch   hostname of the build machine
  cygwin_nt-10.0-i686    build-windows-x86_64
  cygwin_nt-10.0-x86_64  build-windows-x86_64
  msys_nt-10.0-i686      build-windows-x86_64
  msys_nt-10.0-x86_64    build-windows-x86_64
  darwin-x86_64          build-macos-x86_64
  freebsd-amd64          build-freebsd-amd64
  linux-aarch64          build-linux-aarch64
  linux-armv7l           build-linux-armv7l
  linux-i386             build-linux-x86_64
  linux-x86_64           build-linux-x86_64
)

local -rA protocol=(
  'cygwin_nt-10.0-*' windows
  'msys_nt-10.0-*'   windows
  'darwin-*'         unix
  'freebsd-*'        unix
  'linux-*'          unix
)

local -r rootdir=${ZSH_SCRIPT:h}
local -r logs=$rootdir/logs
local -r locks=$rootdir/locks
local -r binaries=$rootdir/bin

function usage() {
  print -r -- 'usage: mbuild [-b REF] [KERNEL-ARCH]...'
}

local OPTARG opt git_ref=master
local -i OPTIND
while getopts ":b:h" opt; do
  case $opt in
    h) usage; return 0;;
    b) [[ -n $OPTARG ]]; git_ref=$OPTARG;;
    \?) print -ru2 -- "mbuild: invalid option: -$OPTARG"           ; return 1;;
    :)  print -ru2 -- "mbuild: missing required argument: -$OPTARG"; return 1;;
    *)  print -ru2 -- "mbuild: invalid option: -$opt"              ; return 1;;
  esac
done

shift $((OPTIND - 1))

(( $# )) || set -- ${(k)assets}

local platform
for platform; do
  if (( ! $+assets[$platform] )); then
    print -ru2 -- "mbuild: invalid platform: $platform"
    return 1
  fi
done

local build='
  rm -rf gitstatus
  git clone --recursive --shallow-submodules --depth=1 -b '$git_ref' '$git_url'
  cd gitstatus
  if command -v zsh >/dev/null 2>&1; then
    sh=zsh
  elif command -v dash >/dev/null 2>&1; then
    sh=dash
  elif command -v ash >/dev/null 2>&1; then
    sh=ash
  else
    sh=sh
  fi
  $sh -x ./build -m '

function build-unix() {
  local intro
  [[ $2 != darwin-* ]] || intro='PATH="/usr/local/bin:$PATH"'
  ssh $1 -- /bin/sh -uex <<<"
    $intro
    cd /tmp
    $build ${2##*-}"
  scp $1:/tmp/gitstatus/usrbin/gitstatusd-$2 $binaries/
}

function build-windows() {
  local tmp env bin intro
  case $2 in
    msys_nt-10.0-*)
      tmp='/c/tmp'
      env='MSYSTEM=MSYS'
      intro='pacman -Sy --needed --noconfirm git'
    ;|
    cygwin_nt-10.0-*)
      tmp='/cygdrive/c/tmp'
    ;|
    msys_nt-10.0-i686)     bin='c:/msys32/usr/bin';;
    msys_nt-10.0-x86_64)   bin='c:/msys64/usr/bin';;
    cygwin_nt-10.0-i686)   bin='c:/cygwin32/bin'  ;;
    cygwin_nt-10.0-x86_64) bin='c:/cygwin64/bin'  ;;
  esac
  ssh $1 $bin/env.exe $env $bin/bash.exe -l <<<"
    set -uex
    $intro
    mkdir -p -- $tmp
    cd -- $tmp
    $build ${2##*-}"
  scp $1:c:/tmp/gitstatus/usrbin/gitstatusd-$2 $binaries/
  chmod +x $binaries/gitstatusd-$2
}

function build() (
  local platform=$1
  local machine=$assets[$platform]
  print -n >>$locks/$machine
  zsystem flock $locks/$machine
  build-${protocol[(k)$platform]} $machine $platform
)

function mbuild() {
  local platform pid pids=()
  for platform; do
    build $platform &>$logs/$platform &
    print -r -- "starting build for $platform on $assets[$platform] (pid $!)"
    pids+=($platform $!)
  done
  for platform pid in $pids; do
    print -rn -- "$platform => "
    if wait $pid; then
      print -r -- "ok"
    else
      print -r -- "error $?"
      print -r -- "---------------------"
      >&2 cat $logs/$platform
      return 1
    fi
  done
}

function run-process-tree() {
  zmodload zsh/system zsh/param/private || return
  local -P opt=(${(kv)options[@]})      || return
  emulate -L zsh -o err_return          || return
  setopt monitor pipe_fail no_unset

  local -P stdout REPLY
  exec {stdout}>&1

  {
    local -Pi pipe
    local -P gid=$sysparams[pid]
    local -P sig=(TERM EXIT INT QUIT ILL PIPE ZERR HUP)
    local -P trap=(trap "trap - $sig; kill -- -$sysparams[pid]" $sig)

    exec {pipe}>&1 1>&$stdout
    $trap

    {
      $trap
      while sleep 1 && print -u $pipe .; do; done
    } 2>/dev/null &
    local -Pi watchdog=$!

    {
      exec {pipe}>&-
      trap - $sig
      options=($opt zle off monitor off)
      "$@"
    } &
    local -Pi ret
    wait $! || ret=$?

    trap "exit $ret" TERM
    kill $watchdog
    wait $watchdog
    return ret
  } | while read; do; done
}

mkdir -p -- $logs $locks $binaries
run-process-tree mbuild "$@"
